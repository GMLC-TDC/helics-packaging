name: Build Python Packages

on:
  release:
    types: [created]
  push:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2010_x86_64
    steps:
    - uses: actions/checkout@v1
    - name: Create wheels
      run: |
        curl -O -L https://github.com/Kitware/CMake/releases/download/v3.16.2/cmake-3.16.2-Linux-x86_64.tar.gz
        tar xzf cmake-*.tar.gz && rm cmake-*.tar.gz && mv cmake-* cmake
        PATH="${PWD}/cmake/bin:${PATH}"
        export PATH
        # Install HELICS shared library for Linux
        curl -O -L https://github.com/nightlark/HELICS/releases/latest/download/Helics-shared-2.3.1-Linux-x86_64.tar.gz
        tar xzf Helics-*.tar.gz && rm Helics-*.tar.gz && mv Helics-* helics
        CMAKE_PREFIX_PATH="${PWD}/helics"
        export CMAKE_PREFIX_PATH
        # Checkout the HELICS source tree into the pip folder
        git clone -b python-nolink --single-branch https://github.com/GMLC-TDC/HELICS pip/bundled/helics
        # Compile wheels
        pushd pip
        for PYBIN in /opt/python/cp3*/bin; do
          "${PYBIN}/python" setup.py bdist_wheel --dist-dir=../wheelhouse
        done
        popd
        # Bundle external shared libraries into the wheels
        for whl in wheelhouse/*.whl; do
          auditwheel repair "$whl" --plat manylinux2010_x86_64 -w wheelhouse/manylinux2010
        done
    - uses: actions/upload-artifact@v1
      with:
        name: python-dist
        path: wheelhouse/manylinux2010

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup macOS 10.10 SDK
      if: runner.os == 'macOS'
      run: ./.github/workflows/setup-macos-10.10-sdk.sh
    - name: Setup build directory
      run: |
        # Install HELICS shared library for Linux
        curl -O -L https://github.com/nightlark/HELICS/releases/latest/download/Helics-shared-2.3.1-macOS-x86_64.tar.gz
        tar xzf Helics-*.tar.gz && rm Helics-*.tar.gz && mv Helics-* helics
        # Checkout the HELICS source tree into the pip folder
        git clone -b python-nolink --single-branch https://github.com/GMLC-TDC/HELICS pip/bundled/helics
      shell: bash
    - uses: actions/setup-python@v1
      with: 
        python-version: '3.7'
    - name: Create wheel
      env:
        MACOSX_DEPLOYMENT_TARGET: '10.10'
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel delocate
        CMAKE_PREFIX_PATH="${PWD}/helics"
        export CMAKE_PREFIX_PATH
        # Compile wheels
        pushd pip
        python setup.py bdist_wheel --dist-dir=../wheelhouse
        popd
        DYLD_LIBRARY_PATH="$PWD/helics/lib:$PWD/helics/lib64:$DYLD_LIBRARY_PATH"
        export DYLD_LIBRARY_PATH
        cd wheelhouse
        delocate-listdeps --all helics-*.whl
        delocate-wheel -w fixed-wheels -v helics-*.whl
      shell: bash
    - uses: actions/upload-artifact@v1
      with:
        name: python-dist
        path: wheelhouse/fixed-wheels

  build-win64:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            winarch: win64
          - arch: x86
            winarch: win32
    steps:
    - uses: actions/checkout@v1
    - name: Setup build directory
      run: |
        # Install HELICS shared library for Linux
        curl -O -L https://github.com/nightlark/HELICS/releases/latest/download/Helics-shared-2.3.1-${{ matrix.winarch }}.tar.gz
        tar xzf Helics-*.tar.gz && rm Helics-*.tar.gz && mv Helics-* helics
        # Checkout the HELICS source tree into the pip folder
        git clone -b python-nolink --single-branch https://github.com/GMLC-TDC/HELICS pip/bundled/helics
      shell: bash
    - uses: actions/setup-python@v1
      with: 
        python-version: '3.5'
        architecture: ${{ matrix.arch }}
    - name: Create wheel
      run: |
        python --version
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel
        CMAKE_PREFIX_PATH="${PWD}/helics"
        export CMAKE_PREFIX_PATH
        # Compile wheels
        cd pip
        python setup.py bdist_wheel --dist-dir=../wheelhouse
      shell: bash
    - uses: actions/setup-python@v1
      with: 
        python-version: '3.6'
        architecture: ${{ matrix.arch }}
    - name: Create wheel
      run: |
        python --version
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel
        CMAKE_PREFIX_PATH="${PWD}/helics"
        export CMAKE_PREFIX_PATH
        # Compile wheels
        cd pip
        python setup.py bdist_wheel --dist-dir=../wheelhouse
      shell: bash
    - uses: actions/setup-python@v1
      with: 
        python-version: '3.7'
        architecture: ${{ matrix.arch }}
    - name: Create wheel
      run: |
        python --version
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel
        CMAKE_PREFIX_PATH="${PWD}/helics"
        export CMAKE_PREFIX_PATH
        # Compile wheels
        cd pip
        python setup.py bdist_wheel --dist-dir=../wheelhouse
      shell: bash
    - uses: actions/setup-python@v1
      with: 
        python-version: '3.8'
        architecture: ${{ matrix.arch }}
    - name: Create wheel
      run: |
        python --version
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel
        CMAKE_PREFIX_PATH="${PWD}/helics"
        export CMAKE_PREFIX_PATH
        # Compile wheels
        cd pip
        python setup.py bdist_wheel --dist-dir=../wheelhouse
      shell: bash
    - name: Fixup wheels
      run: |
        echo "Add libzmq to each wheel -- wheel unpack, wheel pack"
      shell: bash
    - uses: actions/upload-artifact@v1
      with:
        name: python-dist
        path: wheelhouse/
    - uses: actions/upload-artifact@v1
      if: always()
      with:
        name: win-build-dir
        path: pip/build

#    - name: Publish to PyPI
#      env:
#        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#      run: |
#        python -m pip install --upgrade pip
#        pip install setuptools wheel twine
#        twine upload dist/*
