name: Build Python Packages

on:
  release:
    types: [created]
  push:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2010_x86_64
    steps:
    - uses: actions/checkout@v1
    - name: Create wheels
      run: |
        source ./pip/packaging_scripts/setup-Linux.sh "$(cat VERSION)"
        ./pip/packaging_scripts/build-Linux.sh
        ./pip/packaging_scripts/repair-Linux.sh
    - uses: actions/upload-artifact@v1
      with:
        name: python-dist
        path: wheelhouse/manylinux2010

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup macOS 10.10 SDK
      if: runner.os == 'macOS'
      run: ./.github/workflows/setup-macos-10.10-sdk.sh
    - name: Setup build directory
      run: source ./pip/packaging_scripts/setup-macOS.sh "$(cat VERSION)"
      shell: bash

    - uses: actions/setup-python@v1
      name: Setup Python 3.5
      with: 
        python-version: '3.5'
    - name: Create wheel
      run: ./pip/packaging_scripts/build-macOS.sh
      shell: bash
    - uses: actions/setup-python@v1
      name: Setup Python 3.6
      with: 
        python-version: '3.6'
    - name: Create wheel
      run: ./pip/packaging_scripts/build-macOS.sh
      shell: bash
    - uses: actions/setup-python@v1
      name: Setup Python 3.7
      with: 
        python-version: '3.7'
    - name: Create wheel
      run: ./pip/packaging_scripts/build-macOS.sh
      shell: bash
    - uses: actions/setup-python@v1
      name: Setup Python 3.8
      with: 
        python-version: '3.8'
    - name: Create wheel
      run: ./pip/packaging_scripts/build-macOS.sh
      shell: bash

    - uses: actions/setup-python@v1
      name: Setup Python 2.7
      with: 
        python-version: '2.7'
    - name: Create wheel
      run: brew install swig && ./pip/packaging_scripts/build-macOS.sh
      shell: bash

    - name: Delocate wheels
      run: ./pip/packaging_scripts/repair-macOS.sh
      shell: bash
    
    - uses: actions/upload-artifact@v1
      with:
        name: python-dist
        path: wheelhouse/fixed-wheels

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            winarch: win64
          - arch: x86
            winarch: win32
    steps:
    - uses: actions/checkout@v1
    - name: Setup build directory
      run: source ./pip/packaging_scripts/setup-Windows.sh "$(cat VERSION)" "${{ matrix.winarch }}"
      shell: bash
    - uses: actions/setup-python@v1
      name: Setup Python 3.5
      with: 
        python-version: '3.5'
        architecture: ${{ matrix.arch }}
    - name: Create wheel
      run: ./pip/packaging_scripts/build-Windows.sh
      shell: bash
    - uses: actions/setup-python@v1
      name: Setup Python 3.6
      with: 
        python-version: '3.6'
        architecture: ${{ matrix.arch }}
    - name: Create wheel
      run: ./pip/packaging_scripts/build-Windows.sh
      shell: bash
    - uses: actions/setup-python@v1
      name: Setup Python 3.7
      with: 
        python-version: '3.7'
        architecture: ${{ matrix.arch }}
    - name: Create wheel
      run: ./pip/packaging_scripts/build-Windows.sh
      shell: bash
    - uses: actions/setup-python@v1
      name: Setup Python 3.8
      with: 
        python-version: '3.8'
        architecture: ${{ matrix.arch }}
    - name: Create wheel
      run: ./pip/packaging_scripts/build-Windows.sh
      shell: bash
      
    - uses: actions/setup-python@v1
      name: Setup Python 2.7
      with: 
        python-version: '2.7'
        architecture: ${{ matrix.arch }}
    - name: Create wheel
      run: choco install -y swig && ./pip/packaging_scripts/build-Windows.sh
      shell: bash

    - name: Repair wheels
      run: ./pip/packaging_scripts/repair-Windows.sh
      shell: bash

    - uses: actions/upload-artifact@v1
      with:
        name: python-dist
        path: wheelhouse/fixed-wheels/

  build-sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Build source distribution
      run: |
        VERSION=$(cat VERSION)
        mkdir -p pip/bundled/helics
        curl -O -L https://github.com/nightlark/HELICS/releases/download/v${VERSION}/Helics-v${VERSION}-source.tar.gz
        tar xzf Helics-*.tar.gz -C pip/bundled/helics/ && rm Helics-*.tar.gz
        cd pip
        python setup.py sdist
    - uses: actions/upload-artifact@v1
      with:
        name: python-dist
        path: pip/dist

  publish:
    needs: [build-sdist, build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
    - name: Get the built packages
      uses: actions/download-artifact@v1
      with:
        name: python-dist
        path: dist
    - name: Publish package to TestPyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.test_pypi_password }}
        repository_url: https://test.pypi.org/legacy/
#        packages_dir: custom-dir/
